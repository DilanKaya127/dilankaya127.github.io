#!/usr/bin/env ruby
# sync_translations.rb - Rails √ßevirilerini Jekyll sitesine senkronize eder

require 'fileutils'
require 'yaml'

class TranslationSyncer
  # Yollarƒ± ayarlayƒ±n
  RAILS_REPO_PATH = "../../rails-tr-TR"  # Rails fork'unuzun yolu
  RAILS_TR_PATH = "#{RAILS_REPO_PATH}/guides/source/tr-TR"
  JEKYLL_GUIDES_PATH = "./guides/tr"
  
  def initialize
    validate_paths
    ensure_directories
  end

  def sync_all
    puts "üîÑ √áeviriler senkronize ediliyor..."
    
    synced_files = []
    
    Dir.glob("#{RAILS_TR_PATH}/*.md").each do |source_file|
      filename = File.basename(source_file)
      destination = "#{JEKYLL_GUIDES_PATH}/#{filename}"
      
      if sync_file(source_file, destination)
        synced_files << filename
      end
    end
    
    if synced_files.any?
      puts "‚úÖ Senkronize edilen dosyalar:"
      synced_files.each { |file| puts "   - #{file}" }
      
      update_index_with_translations(synced_files)
      puts "üìù Ana sayfa g√ºncellendi"
    else
      puts "‚ÑπÔ∏è  Senkronize edilecek yeni dosya bulunamadƒ±"
    end
  end

  def sync_file(source, destination)
    return false unless File.exist?(source)
    
    content = File.read(source)
    processed_content = process_translation_content(content, File.basename(source, '.md'))
    
    if !File.exist?(destination) || File.read(destination) != processed_content
      File.write(destination, processed_content)
      puts "‚úÖ #{File.basename(destination)} g√ºncellendi"
      return true
    end
    
    false
  end

  def watch_mode
    puts "üëÄ ƒ∞zleme modu ba≈ülatƒ±ldƒ±..."
    puts "Rails √ßevirilerinde deƒüi≈üiklik olduƒüunda otomatik senkronize edilecek"
    puts "√áƒ±kmak i√ßin Ctrl+C"
    
    last_sync = Time.now
    
    loop do
      changes = check_for_changes(last_sync)
      
      if changes.any?
        puts "\nüîÑ Deƒüi≈üiklik tespit edildi: #{changes.join(', ')}"
        sync_all
        last_sync = Time.now
      end
      
      sleep 2
    end
  end

  private

  def validate_paths
    unless Dir.exist?(RAILS_REPO_PATH)
      puts "‚ùå Rails repository bulunamadƒ±: #{RAILS_REPO_PATH}"
      puts "   Rails'i fork'layƒ±p klonladƒ±ƒüƒ±nƒ±zdan emin olun"
      exit 1
    end

    unless Dir.exist?(RAILS_TR_PATH)
      puts "‚ùå T√ºrk√ße √ßeviri klas√∂r√º bulunamadƒ±: #{RAILS_TR_PATH}"
      puts "   rails/guides/source/tr-TR klas√∂r√ºn√º olu≈üturun"
      exit 1
    end
  end

  def ensure_directories
    FileUtils.mkdir_p(JEKYLL_GUIDES_PATH)
  end

  def process_translation_content(content, guide_name)
    # YAML front matter'ƒ± kontrol et ve ekle/g√ºncelle
    if content.start_with?('---')
      # Mevcut front matter'ƒ± g√ºncelle
      front_matter_end = content.index('---', 3)
      if front_matter_end
        existing_front_matter = content[4..front_matter_end-1]
        body = content[front_matter_end+4..-1]
        
        # YAML'ƒ± parse et ve g√ºncelle
        begin
          yaml_data = YAML.load(existing_front_matter) || {}
          yaml_data['layout'] = 'guide'
          yaml_data['title'] ||= generate_title(guide_name)
          yaml_data['description'] ||= "Bu kƒ±lavuz #{yaml_data['title'].downcase} konusunu ele alƒ±r."
          
          new_front_matter = yaml_data.to_yaml.strip
          return "---\n#{new_front_matter}\n---\n#{body}"
        rescue => e
          puts "‚ö†Ô∏è  YAML parse hatasƒ± #{guide_name}.md i√ßin: #{e.message}"
        end
      end
    else
      # Front matter yoksa ekle
      yaml_data = {
        'layout' => 'guide',
        'title' => generate_title(guide_name),
        'description' => "Bu kƒ±lavuz #{generate_title(guide_name).downcase} konusunu ele alƒ±r."
      }
      
      front_matter = yaml_data.to_yaml.strip
      return "---\n#{front_matter}\n---\n\n#{content}"
    end
    
    content
  end

  def generate_title(guide_name)
    # ƒ∞ngilizce kƒ±lavuz isimlerini T√ºrk√ße'ye √ßevir
    titles = {
      'getting_started' => 'Rails ile Ba≈ülarken',
      'active_record_basics' => 'Active Record Temelleri',
      'active_record_migrations' => 'Active Record Migrasyonlarƒ±',
      'active_record_validations' => 'Active Record Doƒürulamalarƒ±',
      'active_record_callbacks' => 'Active Record Callback\'leri',
      'active_record_associations' => 'Active Record ƒ∞li≈ükileri',
      'active_record_querying' => 'Active Record Sorgu Aray√ºz√º',
      'action_controller_overview' => 'Action Controller\'a Genel Bakƒ±≈ü',
      'routing' => 'Rails Y√∂nlendirme',
      'action_view_overview' => 'Action View\'a Genel Bakƒ±≈ü',
      'layouts_and_rendering' => 'D√ºzenler ve Rendering',
      'action_view_helpers' => 'Action View Yardƒ±mcƒ±larƒ±',
      'action_cable_overview' => 'Action Cable\'a Genel Bakƒ±≈ü',
      'testing' => 'Rails Uygulamalarƒ±nƒ± Test Etme',
      'security' => 'Rails G√ºvenlik Kƒ±lavuzu',
      'configuring' => 'Rails Uygulamalarƒ±nƒ± Yapƒ±landƒ±rma',
      'api_app' => 'Rails API Uygulamalarƒ±',
      'active_job_basics' => 'Active Job Temelleri'
    }
    
    titles[guide_name] || guide_name.split('_').map(&:capitalize).join(' ')
  end

  def update_index_with_translations(synced_files)
    # Ana sayfayƒ± g√ºncelleme mantƒ±ƒüƒ± (isteƒüe baƒülƒ±)
    # Bu fonksiyon mevcut √ßevirilere g√∂re index.md'yi g√ºnceller
  end

  def check_for_changes(since_time)
    changes = []
    
    Dir.glob("#{RAILS_TR_PATH}/*.md").each do |file|
      if File.mtime(file) > since_time
        changes << File.basename(file)
      end
    end
    
    changes
  end
end

# Script kullanƒ±mƒ±
if ARGV.empty?
  puts <<~USAGE
    üîÑ Rails √áeviri Senkronizasyon Aracƒ±

    Kullanƒ±m:
      ruby sync_translations.rb <komut>

    Komutlar:
      sync     - T√ºm √ßevirileri bir kez senkronize et
      watch    - Deƒüi≈üiklikleri izle ve otomatik senkronize et

    √ñrnekler:
      ruby sync_translations.rb sync
      ruby sync_translations.rb watch
  USAGE
  exit
end

syncer = TranslationSyncer.new

case ARGV[0]
when 'sync'
  syncer.sync_all
when 'watch'
  syncer.watch_mode
else
  puts "‚ùå Bilinmeyen komut: #{ARGV[0]}"
  puts "Yardƒ±m i√ßin: ruby sync_translations.rb"
end